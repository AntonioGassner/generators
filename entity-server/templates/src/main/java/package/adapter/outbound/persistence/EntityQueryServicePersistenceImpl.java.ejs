<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service;

<%_
const serviceClassName = entityClass + 'QueryServicePersistenceImpl';
const serviceInterfaceClassName = entityClass + 'QueryServicePersistence';

const instanceType = restClass;
const instanceName = restInstance;
const mapper = entityInstance  + 'Mapper';
const dtoToEntity = mapper + '.'+ 'toEntity';
const entityToDto = mapper + '.'+ 'toDto';
const entityListToDto = mapper + '.' + 'toDto';
const entityToDtoReference = mapper + '::'+ 'toDto';
const repository = entityInstance  + 'Repository';
const criteria = entityClass + 'Criteria';
_%>
import java.util.List;

import javax.persistence.criteria.JoinType;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import io.github.jhipster.service.QueryService;
import it.maggioli.icarocloud.baseservice.adapter.outbound.persistence.IcaroQueryService;
import it.maggioli.icarocloud.baseservice.web.rest.errors.ErrorConstants;



import <%= packageName %>.repository.<%= entityClass %>Repository;
<%_ if (searchEngineElasticsearch) { _%>
import <%= packageName %>.repository.search.<%= entityClass %>SearchRepository;
<%_ } _%>
import <%= packageName %>.service.criteria.<%= entityClass %>Criteria;
<%_ if (dtoMapstruct) { _%>
import <%= packageName %>.service.dto.<%= dtoClass %>;
import <%= packageName %>.service.mapper.<%= entityClass %>Mapper;
<%_ } _%>

/**
 * Service for executing complex queries for {@link <%= persistClass %>} entities in the database.
 * The main input is a {@link <%= entityClass %>Criteria} which gets converted to {@link Specification},
 * in a way that all the filters must apply.
 * It returns a {@link List} of {@link <%= entityClass %>Model} or a {@link Page} of {@link <%= entityClass %>Model} which fulfills the criteria.
 */
@Service
@RequiredArgsConstructor
@Transactional(rollbackFor = IcaroPersistenceException.class)
public class <%= serviceClassName %> extends IcaroQueryService<<%= persistClass %>> implements  <%= serviceInterfaceClassName %> {

    private final Logger log = LoggerFactory.getLogger(<%= serviceClassName %>.class);  

    private final <%= persistClass %>Repository <%= entityInstance %>Repository;

    private final <%= persistClass %>EntityMapper <%= entityInstance %>EntityMapper;
    
    @Autowired
    private <%= serviceClassName %> self;
    
    /**
     * Return a List of entities which matches the criteria from
     * the database.
     * 
     * @param criteria The object which holds all the filters, which the entities
     *                 should match.
     * @return the matching entities.
     * @throws IcaroPersistenceException
     */
    @Override
    public List<<%= persistClass %>Model> findByCriteria(<%= persistClass %>Criteria criteria) throws IcaroPersistenceException {
        log.debug("find by criteria : {}, data: {}", criteria);
        try {
            return self.findByCriteriaTx(criteria);
        } catch (RuntimeException ex) {
            throw new IcaroPersistenceException(ErrorConstants.OP_FIND_BY_CRITERIA, ex);
        } catch (Exception ex) {
            throw new IcaroPersistenceException(ErrorConstants.OP_FIND_BY_CRITERIA, ex);
        }
    }

    /**
     * Return a Page of entities which matches the criteria from
     * the database.
     * 
     * @param criteria The object which holds all the filters, which the entities
     *                 should match.
     * @param page     The page, which should be returned.
     * @return the matching entities.
     * @throws IcaroPersistenceException
     */
    @Override
    public Page<<%= persistClass %>Model> findByCriteria(<%= persistClass %>Criteria criteria, Pageable page)
            throws IcaroPersistenceException {
        log.debug("find by criteria : {}, page: {}", criteria, page);
        try {
            return self.findByCriteriaTx(criteria, page);
        } catch (RuntimeException ex) {
            throw new IcaroPersistenceException(ErrorConstants.OP_FIND_BY_CRITERIA, ex);
        } catch (Exception ex) {
            throw new IcaroPersistenceException(ErrorConstants.OP_FIND_BY_CRITERIA, ex);
        }
    }


  
    /**
     * Function to convert Criteria to a Specification
     * @param criteria The object which holds all the filters, which the entities should match.
     * @return the matching {@link Specification} of the entity.
     */
    protected Specification<<%= persistClass %>> createSpecification(<%= criteria %> criteria) {
        Specification<<%= persistClass %>> specification = Specification.where(null);
        if (criteria != null) {
           
            if (criteria.get<%= primaryKey.nameCapitalized %>() != null) {
                specification = specification.and(buildSpecification(criteria.get<%= primaryKey.nameCapitalized %>(), <%= persistClass %>_.<%= primaryKey.name %>));
            }
<%_
fields.forEach((field) => {
  if (field.id) return;
  if (isFilterableType(field.fieldType)) { _%>
            if (criteria.get<%= field.fieldInJavaBeanMethod %>() != null) {
                specification = specification.and(<%= getSpecificationBuilder(field.fieldType) %>(criteria.get<%= field.fieldInJavaBeanMethod %>(), <%= persistClass %>_.<%= field.fieldName %>));
            }
  <%_ }
});

relationships.forEach((relationship) => {
  const metamodelFieldName = (relationship.relationshipManyToMany || relationship.relationshipOneToMany) ? relationship.relationshipFieldNamePlural : relationship.relationshipFieldName; _%>
if (criteria.get<%= relationship.relationshipNameCapitalized %>Id() != null) {
    specification = specification.and(buildSpecification(criteria.get<%= relationship.relationshipNameCapitalized %>Id(),
        root -> root.join(<%= persistClass %>_.<%= metamodelFieldName %>, JoinType.LEFT).get(<%= asEntity(relationship.otherEntityNameCapitalized) %>_.<%= relationship.otherEntity.primaryKey.name %>)));
}
<%_ }); /* forEach */ _%>
        }
        return specification;
    }


   // --------------------------------- TRANSAZIONI ----------------------------------------------
    /**
     * Return a List of entities which matches the criteria from the database.
     * @param criteria The object which holds all the filters, which the entities should match.
     * @return the matching entities.
     */
    @Transactional(readOnly = true)
    public List<<%= persistClass %>Model> findByCriteriaTx(<%= persistClass %>Criteria criteria) {
        log.debug("find by criteria Tx: {}", criteria);
                      
        final Specification<<%= persistClass %>> specification = createSpecification(criteria);
        return (List<<%= persistClass %>Model>) <%= entityInstance %>Repository.findAll(specification).stream()
                .map(<%= entityInstance %>EntityMapper::fromEntityToModel).collect(Collectors.toList());
    }

    /**
     * Return a Page of entities which matches the criteria from the database.
     * @param criteria The object which holds all the filters, which the entities should match.
     * @param page The page, which should be returned.
     * @return the matching entities.
     */
    @Transactional(readOnly = true)
    public Page<<%= persistClass %>Model> findByCriteriaTx(<%= persistClass %>Criteria criteria, Pageable page) {
        log.debug("find by criteria : {}, page: {}", criteria, page);
                    
        final Specification<<%= persistClass %>> specification = createSpecification(criteria);              
        return (Page<<%= persistClass %>Model>) <%= entityInstance %>Repository.findAll(specification, page)
                .map(<%= entityInstance %>EntityMapper::fromEntityToModel);
    }


}
