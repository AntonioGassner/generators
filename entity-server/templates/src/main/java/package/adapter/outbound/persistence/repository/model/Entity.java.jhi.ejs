<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>


<&_
 // Register sections and max allowed fragments, 0 for unlimited.
  fragments.registerSections({
    importSection: 0,
    staticImportSection: 0,
    annotationSection: 0,
    classStaticFieldsSection: 0,
    classFieldsSection: 0,
    classAdditionalFieldsSection: 0,
    classAdditionalFieldsMethodsSection: 0,
    classAdditionalRelationshipsSection: 0,
    classAdditionalRelationshipsMethodsSection: 0,
<%_ for (const field of fields) { _%>
    field<%- field.fieldNameCapitalized %>AnnotationSection: 0,
  <%_ if (field.fieldWithContentType) { _%>
    field<%- field.fieldNameCapitalized %>ContentTypeAnnotationSection: 0,
  <%_ } _%>
    field<%- field.fieldNameCapitalized %>CustomSetSection: 1,
<%_ } _%>
<%_ for (const relationship of relationships) { _%>
    relationship<%- relationship.relationshipNameCapitalized %>AnnotationSection: 0,
    relationship<%- relationship.relationshipNameCapitalized %>CustomSetSection: 1,
    relationship<%- relationship.relationshipNameCapitalized %>CustomAddSection: 1,
    relationship<%- relationship.relationshipNameCapitalized %>CustomRemoveSection: 1,
<%_ } _%>
  });
-&>
package <%= packageName %>.domain;

<&- fragments.staticImportSection() -&>
<&- fragments.importSection() -&>
<%_ if (relationshipsContainOtherSideIgnore) { _%>
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
<%_ } _%>
<%_ if (!dtoMapstruct && typeof javadoc !== 'undefined') { _%>
import io.swagger.annotations.ApiModel;
<%_ } _%>
<%_ if (!dtoMapstruct && importApiModelProperty) { _%>
import io.swagger.annotations.ApiModelProperty;
<%_ } _%>

import java.io.Serializable;
<%_ if (fieldsContainBigDecimal) { _%>
import java.math.BigDecimal;
<%_ } if (fieldsContainInstant) { _%>
import java.time.Instant;
<%_ } if (fieldsContainLocalDate) { _%>
import java.time.LocalDate;
<%_ } if (fieldsContainZonedDateTime) { _%>
import java.time.ZonedDateTime;
<%_ } if (fieldsContainDuration) { _%>
import java.time.Duration;
<%_ } if (entityContainsCollectionField) { _%>
import java.util.HashSet;
import java.util.Set;
<%_ } _%>
<%_ if (fieldsContainUUID) { _%>
import java.util.UUID;
<%_ }
Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%= packageName %>.domain.enumeration.<%= element %>;
<%_ }); _%>

import java.util.UUID;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.GenericGenerator;
import it.maggioli.icarocloud.baseservice.adapter.outbound.persistence.model.AbstractAuditingEntity;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

<%_ if (typeof javadoc === 'undefined') { _%>
/**
 * A <%= persistClass %>.
 */
<%_ } else { _%>
<%- formatAsClassJavadoc(javadoc) %>
  <%_ if (!dtoMapstruct) { _%>
@ApiModel(description = "<%- formatAsApiDescription(javadoc) %>")
  <%_ } _%>
<%_ } _%>
<&- fragments.annotationSection() -&>

@Setter
@Getter
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@Accessors(chain = true)
public class <%= persistClass %> extends AbstractAuditingEntity implements Serializable {

    private static final long serialVersionUID = 1L;

<%_ if (!embedded && primaryKey.composite) { _%>
    @Id
    @GeneratedValue(generator = "UUID")	
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private <%= primaryKey.type %> <%= primaryKey.name %>;

<%_ } _%>
<&- fragments.classStaticFieldsSection() -&>
<&- fragments.classFieldsSection() -&>
<%_ for (const field of fields.filter(field => !field.transient && (embedded || !field.id || !primaryKey.composite))) { _%>
  <%_ if (typeof field.javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(field.javadoc) %>
  <%_ } _%>
  <%_ if (!dtoMapstruct && typeof field.javadoc !== 'undefined') { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(field.javadoc) %>"<% if (field.fieldValidationRequired) { %>, required = true<% } %>)
  <%_ } _%>
<&- fragments.field<%- field.fieldNameCapitalized %>AnnotationSection() -&>


    <%_ if (field.fieldName === "id") { _%>
      private UUID <%= field.fieldName %>;    
   <%_ } else { _%>
    private <%= field.javaFieldType %> <%= field.fieldName %>;
   <%_ } _%>



  <%_ if (field.fieldWithContentType) { _%>
<&- fragments.field<%- field.fieldNameCapitalized %>ContentTypeAnnotationSection() -&>
    private String <%= field.fieldName %>ContentType;

  <%_ } _%>
<%_ } _%>
<&- fragments.classAdditionalFieldsSection() -&>

<%_
// An embedded entity should not reference entities that embed it, unless the other entities are also embedded
for (relationship of relationships.filter(relationship => !relationship.embedded || relationship.otherEntity.embedded || relationship.ownerSide)) {
  if (typeof relationship.javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(relationship.javadoc) %>
    <%_ if (!dtoMapstruct) { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(relationship.javadoc) %>")
    <%_ } _%>
  <%_ } _%>
<&- fragments.relationship<%- relationship.relationshipNameCapitalized %>AnnotationSection() -&>
  <%_ if (relationship.relationshipOneToMany) { _%>
    <%_ if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = {
        <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
        <%_ }); _%>
    }, allowSetters = true)
    <%_ } _%>
    private Set<<%= relationship.otherEntity.persistClass %>> <%= relationship.relationshipFieldNamePlural %> = new HashSet<>();

  <%_ } else if (relationship.relationshipManyToOne) { _%>
    <%_ if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = {
      <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
      <%_ }); _%>
    }, allowSetters = true)
    <%_ } _%>
    private <%= relationship.otherEntity.persistClass %> <%= relationship.relationshipFieldName %>;

  <%_ } else if (relationship.relationshipManyToMany) { _%>
    <%_ if (relationship.ignoreOtherSideProperty) { _%>
    @JsonIgnoreProperties(value = {
      <%_ relationship.otherEntity.relationships.forEach(otherRelationship => { _%>
        "<%= otherRelationship.relationshipReferenceField %>",
      <%_ }); _%>
    }, allowSetters = true)
    <%_ } _%>
    private Set<<%= relationship.otherEntity.persistClass %>> <%= relationship.relationshipFieldNamePlural %> = new HashSet<>();

  <%_ } else { _%>
    private <%= relationship.otherEntity.persistClass %> <%= relationship.relationshipFieldName %>;
  <%_ } _%>

<%_ }; _%>
}
